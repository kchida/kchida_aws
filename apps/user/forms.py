from django import forms
from django.contrib.auth import authenticate
from django.contrib.auth.forms import AuthenticationForm, UserCreationForm
from django.contrib.auth.models import User


USERNAME_REGEX = r'^[0-9\w_]{4,15}$'


class LoginForm(AuthenticationForm):

    username = forms.RegexField(regex=USERNAME_REGEX, required=True,
                                label="Username", widget=forms.TextInput,
                                error_messages={'invalid': "Only 4-15 characters\
                                                consisting of number and letters."})
    
    def __init__(self, request=None, *args, **kwargs):

        super(LoginForm, self).__init__(*args, **kwargs)
    

# Create user from scratch.
class RegisterForm(UserCreationForm):
    
    username = forms.RegexField(regex=USERNAME_REGEX, required=True,
                                label="Username", widget=forms.TextInput,
                                error_messages={'invalid': "Only 6-15 characters\
                                                consisting of number and letters."})
    
    email = forms.EmailField(required=True, label="Email", widget=forms.TextInput,
                             error_messages={'invalid': "Only 6-15 characters\
                                              consisting of number and letters.",
                                              'required': "Email is required."})
    
    # Overrides UserCreation.Meta.fields to add more displayed fields.
    class Meta(UserCreationForm.Meta):
        fields = ("username", "email", "password1", "password2")
    

# Don't create user but add password.    
class SocialRegisterForm(forms.Form):
    
    error_messages = {
        'duplicate_username': "A user with that username already exists.",
        'password_mismatch': "The two password fields didn't match.",
    }
    
    username = forms.RegexField(regex=USERNAME_REGEX, required=True,
                                label="Username", widget=forms.TextInput,
                                error_messages={'invalid': "Only 6-15 characters\
                                                consisting of number and letters."})
    
    email = forms.EmailField(required=True, label="Email")
    
    password1 = forms.CharField(required=True, label="Password",
                                widget=forms.PasswordInput)

    password2 = forms.CharField(required=True, label="Repeat password",
                                widget=forms.PasswordInput)
    
    def clean(self):
        # Since User.username is unique, this check is redundant,
        # but it sets a nicer error message than the ORM. See #13147.
        username = self.cleaned_data["username"]
        password1 = self.cleaned_data.get("password1", "")
        password2 = self.cleaned_data.get("password2", "")
        
        if username and password1:
            if password1 != password2:
                raise forms.ValidationError(
                    self.error_messages['password_mismatch'])
            
            # If the user did not change the default username generated by
            # social-auth, there is no need to check for duplicate users. 
            if username == self.initial['username']:
                return self.cleaned_data
            
            try:
                User.objects.get(username=username)
            except User.DoesNotExist:
                return self.cleaned_data
            else:
                raise forms.ValidationError(self.error_messages['duplicate_username'])

